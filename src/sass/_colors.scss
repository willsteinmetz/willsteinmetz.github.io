$grey: (
  "lighten-5": #fafafa,
  "lighten-4": whitesmoke,
  "lighten-3": #eeeeee,
  "lighten-2": #e0e0e0,
  "lighten-1": #bdbdbd,
  "darken-1": #757575,
  "darken-2": #616161,
  "darken-3": #424242,
  "darken-4": #212121,
  "darken-5": #101010
);

$pl-colors: (
  "pynk": #d94991,
  "cottoncandy": #fdb4f9,
  "twilight": #00335e,
  "chartreuse": #cfd857,
  "carrot": #f78e1b,
  "tomato": #cd2602,
  "maroon": #873e4f,
  "teal": #5ab8a8,
  "cream": #f9f3b5,
  "parrot": #4db81a,
  "black": black,
  "white": white,
  "transparent": transparent
);

@function get-color($color-name, $shade-type: 'base', $shade-value: 1) {
  $color: map-get($pl-colors, $color-name);
  @if ($color-name == 'transparent') {
    @return transparent;
  }
  @if ($shade-type == 'base') {
    @return $color;
  } @else if ($shade-type == 'darken') {
    @return darken($color, ($shade-value * 5));
  } @else {
    @return lighten($color, ($shade-value * 5));
  }
}

@mixin generate-colors() {
  @each $color-name, $color in $pl-colors {
    @each $type in ("base", "text") {
      $selector: if("base", "#{$color-name}", "#{$color-name}-text");
      $property: if("base", "background-color", "color");
      $lighten: if("base", "lighten-", "text-lighten-");
      $darken: if("base", "darken-", "text-darken-");

      .#{$selector} {
        $property: $color;

        @for $i from 1 through 5 {
          &.#{$lighten}#{$i} {
            #{$property}: lighten($color, (5% * $i));
          }

          &.#{$darken}#{$i} {
            #{$property}: darken($color, (5% * $i));
          }
        }
      }
    }
  }

  .grey {
    background-color: #949494;

    @each $shade, $color in $grey {
      &.#{$shade} {
        background-color: $color;
      }
    }
  }

  .grey-text {
    color: #949494;

    @each $shade, $color in $grey {
      &.text-#{$shade} {
        color: $color;
      }
    }
  }
}
